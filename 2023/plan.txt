Одним из малоизвестных примеров Undefined Behavior в C/C++ является нарушение требований к функциям сравнения (компараторам).
Компараторы широко используются в алгоритмах (std::sort, std::binary_search, etc.) и контейнерах (std::set, std::map) и
встречаются как в C++, так и в C (qsort, bsearch). Компараторы должны удовлетворять некоторым аксиомам,
которые в математике описываются понятием строгого слабого порядка (strict weak ordering).
Эти аксиомы неинтуитивны и в них легко ошибиться, о чём свидетельствует большое количество соответствующих багов
в open-source проектах. Современные тулчейны предоставляют средства для отслеживания таких ошибок и
о них будет рассказано в докладе.

== Введение ==

Компаратор - функция сравнения элементов типа,
которая используется различными алгоритмами и контейнерами
стандартной библиотеки для упорядочения элементов.

Компаратор может быть указан явно или по умолчанию реализовываться
с помощью операторов `<` или (с C++20) `<=>`.

Алгоритмы:
  * std::sort, std::stable_sort
  * std::binary_search
  * std::equal_range, std::lower_bound, std::upper_bound
  * std::min_element, std::max_element
  * std::nth_element
  * и многие другие

Контейнеры:
  * std::map, std::multimap
  * std::set, std::multiset

== Пример ошибки ==

Рассмотрим простую программу:

```
#include <algorithm>
#include <vector>
#include <iostream>

#include <stdlib.h>

int main() {
  std::vector<int> vals;
  srand(0);
  for (size_t i = 0; i < N; ++i)
    vals.push_back((double)rand() / RAND_MAX * 10);
  std::sort(vals.begin(), vals.end(),
            [](int l, int r) { return l <= r; });
  for (auto v : vals) std::cout << v << "\n";
  return 0;
}
```

Кто сможет заметить в ней ошибку? (кроме того что плохо использовать `rand()` ;) )

Давайте посмотрим работает ли она:
```
$ g++ -g -DN=10 bad.cc && ./a.out
1
2
3
3
5
7
7
7
8
9
```

Вроде всё нормально. Но что если попробовать увеличить размер:
```
$ g++ -g -DN=50 bad.cc && ./a.out
1
4
1
1
9
2
5
8
0
0
273
0
0
0
1
1
1
1
1
1
2
2
2
2
2
2
3
3
3
3
4
4
4
4
5
5
5
5
5
6
6
6
6
6
7
7
7
7
7
7
double free or corruption (out)
Aborted
```

Как мы видим массив не отсортировался, да ещё и произошёл buffer overflow!
В чём же дело?

```
g++ -g -DN=50 -fsanitize=address -D_GLIBCXX_SANITIZE_VECTOR=1 bad.cc
./a.out
=================================================================
==143607==ERROR: AddressSanitizer: container-overflow on address 0x611000000108 at pc 0x55fa93254d5d bp 0x7fff1ed30c80 sp 0x7fff1ed30c78
READ of size 4 at 0x611000000108 thread T0
    #0 0x55fa93254d5c in operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, __gnu_cxx::__normal_iterator<int*, std::vector<int> > > /usr/include/c++/10/bits/predefined_ops.h:156
    #1 0x55fa93255164 in __unguarded_partition<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, __gnu_cxx::__ops::_Iter_comp_iter<main()::<lambda(int, int)> > > /usr/include/c++/10/bits/stl_algo.h:1904
    #2 0x55fa9325428b in __unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, __gnu_cxx::__ops::_Iter_comp_iter<main()::<lambda(int, int)> > > /usr/include/c++/10/bits/stl_algo.h:1926
    #3 0x55fa93253d1f in __introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, long int, __gnu_cxx::__ops::_Iter_comp_iter<main()::<lambda(int, int)> > > /usr/include/c++/10/bits/stl_algo.h:1958
    #4 0x55fa93253d3d in __introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, long int, __gnu_cxx::__ops::_Iter_comp_iter<main()::<lambda(int, int)> > > /usr/include/c++/10/bits/stl_algo.h:1959
    #5 0x55fa93253d3d in __introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, long int, __gnu_cxx::__ops::_Iter_comp_iter<main()::<lambda(int, int)> > > /usr/include/c++/10/bits/stl_algo.h:1959
    #6 0x55fa93253a6f in __sort<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, __gnu_cxx::__ops::_Iter_comp_iter<main()::<lambda(int, int)> > > /usr/include/c++/10/bits/stl_algo.h:1974
    #7 0x55fa932537fb in sort<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, main()::<lambda(int, int)> > /usr/include/c++/10/bits/stl_algo.h:4894
    #8 0x55fa932534ca in main /home/yugr/tasks/CppRussia/bad.cc:11
    #9 0x7f9bba05ad09 in __libc_start_main ../csu/libc-start.c:308
    #10 0x55fa93253249 in _start (/home/yugr/tasks/CppRussia/a.out+0x2249)

0x611000000108 is located 200 bytes inside of 256-byte region [0x611000000040,0x611000000140)
allocated by thread T0 here:
    #0 0x7f9bba49e647 in operator new(unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:99
    #1 0x55fa93258f68 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /usr/include/c++/10/ext/new_allocator.h:115
    #2 0x55fa932587c9 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /usr/include/c++/10/bits/alloc_traits.h:460
    #3 0x55fa9325834f in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /usr/include/c++/10/bits/stl_vector.h:346
    #4 0x55fa93257a07 in void std::vector<int, std::allocator<int> >::_M_realloc_insert<int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&&) /usr/include/c++/10/bits/vector.tcc:440
    #5 0x55fa9325745e in void std::vector<int, std::allocator<int> >::emplace_back<int>(int&&) /usr/include/c++/10/bits/vector.tcc:121
    #6 0x55fa93256dbd in std::vector<int, std::allocator<int> >::push_back(int&&) /usr/include/c++/10/bits/stl_vector.h:1204
    #7 0x55fa93253483 in main /home/yugr/tasks/CppRussia/bad.cc:10
    #8 0x7f9bba05ad09 in __libc_start_main ../csu/libc-start.c:308

HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
SUMMARY: AddressSanitizer: container-overflow /usr/include/c++/10/bits/predefined_ops.h:156 in operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, __gnu_cxx::__normal_iterator<int*, std::vector<int> > >
Shadow bytes around the buggy address:
  0x0c227fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x0c227fff8010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c227fff8020: 00[fc]fc fc fc fc fc fc fa fa fa fa fa fa fa fa
  0x0c227fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c227fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c227fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c227fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c227fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==143607==ABORTING
```

Итак мы видим что неправильные компараторы могут приводить к серьезным проблемам.

== Причина ошибки ==

Данный код выполняет основной шаг быстрой сортировки -
разбиение массива по опорному элементу `__pivot`
(код намеренно упрощён):
```
_RandomAccessIterator
__unguarded_partition(_RandomAccessIterator __first,
                      _RandomAccessIterator __last,
                      T __pivot,
                      _Compare __comp)
{
  while (true)
    {
      while (__comp(*__first, __pivot))
        ++__first;
      --__last;
      while (__comp(__pivot, *__last))
        --__last;
      if (!(__first < __last))
        return __first;
      std::iter_swap(__first, __last);
      ++__first;
    }
}
```

Переполнение буфера происходит в первом while-цикле.
Как мы видим здесь используется неявное предположение о том,
что найдётся элемент, не меньший `__pivot`.

Оно обусловлено алгоритмом выбора `__pivot`: он выбирается
как медиана трёх элементов массива (первого, среднего и последнего):
```
inline _RandomAccessIterator
__unguarded_partition_pivot(_RandomAccessIterator __first,
                            _RandomAccessIterator __last, _Compare __comp)
{
  _RandomAccessIterator __mid = __first + (__last - __first) / 2;
  std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
                              __comp);
  return std::__unguarded_partition(__first + 1, __last, __first, __comp);
}
```

Т.о. образом при входе в цикл всегда существуют элементы массива, т.ч.
```
exists a b, __comp(a, __pivot) && __comp(__pivot, b)
```
(это упрощение т.к. вообще говоря опорный элемент может совпадать с граничными,
но ограничимся им для простоты формул).

Из этого по идее должно следовать условие что
```
exists a b, !(__pivot < __a) && !(__b < __pivot)
```
которое и гарантировало бы что циклы while не выйдут за границы массива.

Но особенность нашего компаратора заключается как раз в том, что замена
```
__comp(a, __pivot) -> !__comp(__pivot, __a)
```
неправомерна и приводит к тому, что нужный инвариант цикла перестаёт выполняться
и происходит переполнение буфера.

Для того чтобы таких ошибок не происходило,
компараторы должны удовлетворять набору специальных правил,
называемых аксиомами.

Эти аксиомы не специфичны для C++ и встречаются также в других языках,
например [Java](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html)
и [C](https://pubs.opengroup.org/onlinepubs/009696899/functions/qsort.html).

== Аксиомы компараторов: частичный порядок ==

Аксиомы, которым должны подчиняться компараторы, изложены в стандарте языка,
но проще воспользовать Cppref: https://en.cppreference.com/w/cpp/named_req/Compare

Грубо говоря компаратор должен вести себя как "нормальный operator <".

Во-первых компаратор должен удовлетворять трём логичным аксиомам:

1) comp(a, a) == false (иррефлексивность)
2) comp(a, b) == true -> comp(b, a) == false (антисимметричность)
3) comp(a, b) == true && comp(b, c) == true -> comp(a, c) == true (транзитивность)

Такие компараторы называются строгими частичными порядками и знакомы многим из курса общей алгебры.

== Аксиомы компараторов: несравнимость ==

Для того чтобы ввести ещё одну, последнюю аксиому нам надо сначала заметить
что каждый с каждым компаратором связано ещё одна функция ("отношение" в терминах алгебры),
```
bool equiv(T a, T b) { return comp(a, b) == false && comp(b, a) == false; }
```
Его называют отношением несравнимости (incomparability).

Это отношение определяет что два элемента типа "неразличимы" с точки зрения компаратора `comp`.
Оно похоже на некоторое "равенство" или эквивалентность элементов типа друг другу
(которое вообще говоря никак не связано с равенством, задаваемым `operator ==` класса).

Так вот, отношение `equiv` должно удовлетворять четвёртой аксиоме:

4) equiv(a, b) == true && equiv(b, c) == true -> equiv(a,c) == true

(транзитивность несравнимости).

== Понятие о strict weak ordering ==

Алгоритмы сортировки полагаются на все 4 приведённых аксиомы.

Все вместе они называются термином "строгий слабый порядок" (strict weak ordering)

== Spaceship-оператор и другие виды порядков в C++20 ==

TODO: нужно ли это?

== Примеры ошибок со stackoverflow и OSS проектов ==

1) неправильная реализация лексикографического порядка

Это пожалуй самый распространённая ошибка при написании компараторов.

Не сравнивается первый элемент структуры на равенство при сравнение второго:
```
[](SomeClass l, SomeClass r) {
  if (l.first < r.first)
    return true;
  else if (l.second < r.second) // FORGOT "&& l.fist == r.first"
    return true;
  else
    return false;
}
```

Можно исправить, добавив сравнение:
```
[](SomeClass l, SomeClass r) {
  if (l.first < r.first)
    return true;
  if (r.first < l.first)
    return false;
  else if (l.second < r.second)
    return true;
  else
    return false;
}
```
но более правильные решения:
  * использовать `std::tie` и встроенный оператор сравнения кортежей:
```
[](SomeClass l, SomeClass r) {
  return std::tie(l.first, l.second) < std::tie(r.first, r.second);
}
```
  * с C++20 - использовать реализацию `operator <` (или `operator <=>`) по умолчанию

2) Использование нестрогого порядка вместо строгого

Пример этой ошибки мы уже видели вначале

https://stackoverflow.com/questions/40483971/program-crash-in-stdsort-sometimes-cant-reproduce
https://stackoverflow.com/questions/65468629/stl-sort-debug-assertion-failed

3) Отрицание строгого порядка не является строгим порядком

Другая вариация той же ошибки:
```
auto lt = std::less<int>();
auto inv_lt = std::not2(lt);

std::sort(..., ..., inv_lt);
```

В данном случае программист рассчитывал на то что отрицание корректного компаратора
также является компаратором.

Это не так: отрицанием строгого порядка является нестрогий порядок,
который как мы видели в начале презентации приводит к ошибкам.

https://schneide.blog/2010/11/01/bug-hunting-fun-with-stdsort/

4) массивы содержащие NaN

Типы с плавающей точкой поддерживают специальные значения NaN,
которые возникают в результате некорректных вычислений
(например извлечения корня из отрицательного числа или деления `0/0`).

Сравнение с NaN всегда возвращает false, поэтому NaN рассматривается
как эквивалентный остальным числам.

Это приводит к нарушению транзитивности отношения эквивалентности:
`1.0 ~ NAN` и `NAN ~ 2.0`, но не `1.0 ~ 2.0`.

На практике это приводит к неправильной сортировке массивов содержащих NaNs:

```
#include <algorithm>
#include <iostream>
#include <math.h>

int main() {
  double a[] = {
    100,
    5,
    3,
    NAN,
    200,
    11
  };
  std::sort(&a[0], &a[sizeof(a)/sizeof(a[0])]);
  for (auto x : a) std::cout << x << "\n";
  return 0;
}
```

```
$ g++ bad.cc && ./a.out
3
5
100
nan
11
200
```

Исправить эту программу несложно - достаточно перед сортировкой
избавиться от NaN'ов с помощью std::partition:
```
auto end = std::partition(&a[0], &a[sizeof(a)/sizeof(a[0])],
                            [](double x) { return !isnan(x); });
std::sort(&a[0], end);
```

Такой код отработает корректно:
```
3
5
11
100
200
nan
```

https://stackoverflow.com/questions/9244243/strict-weak-ordering-and-stdsort

5) некорректная обработка специального случая

```
[](std::uniq_ptr<SomeClass> l, std::uniq_ptr<SomeClass> r) {
  if (!l.get())
    return true;
  else
    ...
}

В данном случае нарушаются требования иррефлексивности и антисимметричности
в случае когда второй операнд также нулевой.

Достаточно корректно обработать этот случай:
```
if (!l.get())
  return r.get();
```

https://stackoverflow.com/questions/55815423/stdsort-crashes-with-strict-weak-ordering-comparing-with-garbage-values

6) сравнение особых объектов отдельным алгоритмом

```
[](Object l, Object r) {
  if (is_special(l) && is_special(r))
    return comp_special(l, r);
  else
    return comp_normal(l, r);
}
```

Очень легко нарушить условие транзитивности.

Например если
```
comp_special(special_obj1, special_obj2) && comp_normal(special_obj2, normal_obj)
```
то должно быть
```
comp_normal(special_obj1, normal_obj)
```
но это часто не выполняется т.к `comp_special` и `comp_normal` как правило
логически (и алгоритмически) никак не связаны между собой
(обычно они сравнивают совершенно разные поля объектов).

Пример из жизни: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68988

== Отладочные средства в тулчейнах ==

В libstdc++ с помощью макроса `-D_GLIBCXX_DEBUG` можно включить дополнительную проверку
иррефлексивности:
```
$ cat /usr/include/c++/10/bits/stl_algo.h
...
inline void
sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
{
  ...
  __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

  std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
}
...
```
(она бы нашла ошибку из начала презентации).

Libc++ [comparator consistency checks](https://libcxx.llvm.org/DesignDocs/DebugMode.html):
```
Libc++ provides some checks for the consistency of comparators passed to algorithms. Specifically, many algorithms such as binary_search, merge, next_permutation, and sort, wrap the user-provided comparator to assert that !comp(y, x) whenever comp(x, y). This can cause the user-provided comparator to be evaluated up to twice as many times as it would be without the debug mode, and causes the library to violate some of the Standard’s complexity clauses.
```

Включается с помощью `-D_LIBCPP_ENABLE_DEBUG_MODE`.

Обе опции имеют существенный (2x) оверхед, поэтому их рекомендуется использовать только для тестирования.

Эти чекеры не меняют алгоритмическую сложность алгоритма (`O(N*logN)`),
поэтому не могут провести полную проверку корректности
(и в частности проверку условия транзитивности).

== SortChecker ==

Два простых динамических чекера для проверки корректности в рантайме:

  * SortChecker:
    - https://github.com/yugr/sortcheck
    - работает с программами на C
    - перехватывает и проверяет API типа `qsort` и `bsearch`
    - основан на динамической инструментации (`LD_PRELOAD`)
  * SortChecker++
    - https://github.com/yugr/sortcheckxx
    - работает с программами на C++
    - проверяет API типа `std::sort`
    - основан на source-to-source инструментации (Clang-based)

TODO:
  - пример использования
  - псевдокод
  - ограничения (нет поддержки `<=>`, не поддержаны все алгоритмы например `nth_element`)
  - сложность и как с ней бороться
  - результаты

== Квадратичный алгоритм проверки Д. Кутенина ==

https://github.com/danlark1/quadratic_strict_weak_ordering

TODO

== Что почитать ==

* Danila Kutenin [Changing std::sort at Google’s Scale and Beyond](https://danlark.org/2022/04/20/changing-stdsort-at-googles-scale-and-beyond/)
* Jonathan Müller [Mathematics behind Comparison](https://www.foonathan.net/2018/06/equivalence-relations/)

== Домашнее задание ==

1) Изучите типичные ошибки и не повторяйте их в работе
2) Включите `GLIBCXX_DEBUG` и `_LIBCPP_ENABLE_DEBUG_MODE` в своём CI
3) Натравите `Sortchecker` (и `Sortchecker++`) на свой код
    * сообщения об ошибках и дополнения приветствуются!

== Другие типы ошибок в компараторных API ==

0) Неотсортированные массивы в API типа `bsearch` (поддерживается в SortChecker)
1) Неопределённый порядок сортировки эквивалентных элементов (поддерживается в libc++ с помощью рандомизации `-D_LIBCPP_DEBUG_RANDOMIZE_UNSPECIFIED_STABILITY_SEED')

== Заключение ==

Результаты получены на системе:
```
$ uname -a
Linux gcc13 5.10.0-20-amd64 #1 SMP Debian 5.10.158-2 (2022-12-13) x86_64 GNU/Linux
```

* Ссылки на профили
* Попросить делиться идеями чекеров
